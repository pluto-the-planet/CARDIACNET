# -*- coding: utf-8 -*-
"""Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ooJMPffUBvpGUZSQVQQgcFKFG_IvDpUV
"""

import nibabel as nib
import os
import torch
import numpy as np
from glob import glob
from torch.utils.data import Dataset
import h5py
from scipy import ndimage
from torch.utils.data.sampler import Sampler
from skimage import transform as sk_trans
from scipy.ndimage import rotate, zoom
import matplotlib.pyplot as plt
import glob
from pathlib import Path
import SimpleITK as sitk

#TRAINING

sample_list=[]
for root, dirs, files in os.walk("/kaggle/input/automated-cardiac-diagnosis-challenge-miccai17/database/training/", topdown=True):
    slice_num = 0
    mask_path = sorted(glob.glob(root+'/*.nii'))
    for case in mask_path:
        img_itk = sitk.ReadImage(case)
        origin = img_itk.GetOrigin()
        spacing = img_itk.GetSpacing()
        direction = img_itk.GetDirection()
        image = sitk.GetArrayFromImage(img_itk)
        msk_path = case.replace("image", "label").replace(".nii", "_gt.nii")
        if os.path.exists(msk_path):
            print(msk_path)
            msk_itk = sitk.ReadImage(msk_path)
            mask = sitk.GetArrayFromImage(msk_itk)
            image = (image - image.min()) / (image.max() - image.min())
            print(image.shape)
            image = image.astype(np.float32)
            item = case.split("/")[-1].split(".")[0]
            if image.shape != mask.shape:
                print("Error")
            print(item)
            for slice_ind in range(image.shape[0]):
                Path('/kaggle/working/training/{}'.format(item.split('_')[0])).mkdir(parents=True, exist_ok=True)
                f = h5py.File(
                    '/kaggle/working/training/{}/{}_slice_{}.h5'.format(item.split('_')[0],item, slice_ind), 'w')
                sample_list.append('{}_slice_{}'.format(item, slice_ind))
                f.create_dataset(
                    'image', data=image[slice_ind], compression="gzip")
                f.create_dataset('label', data=mask[slice_ind], compression="gzip")
                f.close()
                slice_num += 1
    print("Converted all ACDC volumes to 2D slices")
    print("Total {} slices".format(slice_num))

def random_rot_flip(image, label):
    k = np.random.randint(0, 4)
    image = np.rot90(image, k)
    label = np.rot90(label, k)
    axis = np.random.randint(0, 2)
    image = np.flip(image, axis=axis).copy()
    label = np.flip(label, axis=axis).copy()
    return image, label


def random_rotate(image, label):
    angle = np.random.randint(-20, 20)
    image = ndimage.rotate(image, angle, order=0, reshape=False)
    label = ndimage.rotate(label, angle, order=0, reshape=False)
    return image, label

def RandomGenerator(output_size,sample):
    image, label = sample['image'], sample['label']
    if random.random() > 0.5:
        image, label = random_rot_flip(image, label)
    elif random.random() > 0.5:
        image, label = random_rotate(image, label)
    x, y = image.shape
    image = zoom(image, (output_size[0] / x, output_size[1] / y), order=0)
    label = zoom(label, (output_size[0] / x, output_size[1] / y), order=0)
    image = torch.from_numpy(image.astype(np.float32)).unsqueeze(0)
    label = torch.from_numpy(label.astype(np.uint8))
    sample = {'image': image, 'label': label}
    return sample

def train_gen( base_dir=None, split='train', num=None, transform=None,sample_list=None):
    #self._base_dir = base_dir
    #sample_list = []
    if num is not None and split == "train":
        sample_list = sample_list[:num]
    print("total {} samples".format(len(sample_list)))

    sample2=[]
    samples={}
    for idx in range(0,len(sample_list)):
        case = sample_list[idx]
        #print(case)
        if split == "train":
            h5f = h5py.File(base_dir + "/{}/{}.h5".format(case.split("_")[0],case), 'r')
        image = h5f['image'][:]
        label = h5f['label'][:]
        sample = {'image': image, 'label': label}
        if split == "train":
            sample = RandomGenerator([256,256],sample)
        sample["idx"] = idx
        sample2.append(sample)
    samples = np.stack(sample2, axis=0)
    return samples

#test

sample_list_val=[]
for root, dirs, files in os.walk("/kaggle/input/automated-cardiac-diagnosis-challenge-miccai17/database/testing", topdown=True):
    slice_num = 0
    mask_path = sorted(glob.glob(root+'/*.nii'))
    for case in mask_path:
        img_itk = sitk.ReadImage(case)
        origin = img_itk.GetOrigin()
        spacing = img_itk.GetSpacing()
        direction = img_itk.GetDirection()
        image = sitk.GetArrayFromImage(img_itk)
        msk_path = case.replace("image", "label").replace(".nii", "_gt.nii")
        if os.path.exists(msk_path):
            print(msk_path)
            msk_itk = sitk.ReadImage(msk_path)
            mask = sitk.GetArrayFromImage(msk_itk)
            image = (image - image.min()) / (image.max() - image.min())
            print(image.shape)
            image = image.astype(np.float32)
            item = case.split("/")[-1].split(".")[0]
            if image.shape != mask.shape:
                print("Error")
            print(item)
            for slice_ind in range(image.shape[0]):
                Path('/kaggle/working/testing/{}'.format(item.split('_')[0])).mkdir(parents=True, exist_ok=True)
                f = h5py.File(
                    '/kaggle/working/testing/{}/{}_slice_{}.h5'.format(item.split('_')[0],item, slice_ind), 'w')
                sample_list_val.append('{}_slice_{}'.format(item, slice_ind))
                f.create_dataset(
                    'image', data=image[slice_ind], compression="gzip")
                f.create_dataset('label', data=mask[slice_ind], compression="gzip")
                f.close()
                slice_num += 1
    print("Converted all ACDC volumes to 2D slices")
    print("Total {} slices".format(slice_num))

def val_gen( base_dir=None, split='val', num=None, transform=None,sample_list_val=None):
    if num is not None and split == "val":
        sample_list_val = sample_list_val[:num]
    print("total {} samples".format(len(sample_list_val)))

    sample2=[]
    samples={}
    for idx in range(0,len(sample_list_val)):
        case = sample_list_val[idx]
        #print(case)
        h5f = h5py.File(base_dir + "/{}/{}.h5".format(case.split("_")[0],case), 'r')
        image = h5f['image'][:]
        label = h5f['label'][:]
        sample = {'image': image, 'label': label}


        if split == "val":
            sample = RandomGenerator([256,256],sample)
        sample["idx"] = idx
        sample2.append(sample)
    samples = np.stack(sample2, axis=0)
    return samples